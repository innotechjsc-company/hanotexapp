import { CollectionConfig } from 'payload'

export const TechnologyPropose: CollectionConfig = {
  slug: 'technology-propose',
  admin: {
    useAsTitle: 'technology',
    group: 'üéØ ƒê·ªÅ xu·∫•t',
  },
  access: {
    read: () => true,
    create: () => true,
    update: () => true,
    delete: () => true,
  },
  hooks: {
    afterChange: [
      async ({ doc, req, operation, previousDoc }) => {
        try {
          // L·∫•y technology ID - c√≥ th·ªÉ l√† string ho·∫∑c object
          const technologyId =
            typeof doc.technology === 'string' ? doc.technology : doc.technology?.id

          if (!technologyId) {
            console.error('Kh√¥ng t√¨m th·∫•y technology ID')
            return
          }

          const technology = await req.payload.findByID({
            collection: 'technologies',
            id: technologyId,
          })

          if (!technology) {
            console.error('Kh√¥ng t√¨m th·∫•y technology')
            return
          }

          // X·ª≠ l√Ω khi t·∫°o m·ªõi propose
          if (operation === 'create') {
            if (technology.submitter) {
              const technologyUserId =
                typeof technology.submitter === 'string'
                  ? technology.submitter
                  : technology.submitter?.id

              const proposeUserId = typeof doc.user === 'string' ? doc.user : doc.user?.id
              let proposeUserName = 'Ng∆∞·ªùi d√πng'

              if (proposeUserId) {
                try {
                  const proposeUser = await req.payload.findByID({
                    collection: 'users',
                    id: proposeUserId,
                  })
                  proposeUserName = proposeUser?.full_name || proposeUser?.email || 'Ng∆∞·ªùi d√πng'
                } catch (error) {
                  console.error('L·ªói khi l·∫•y th√¥ng tin user:', error)
                }
              }

              if (technologyUserId) {
                // T·∫°o notification cho user c·ªßa technology
                await req.payload.create({
                  collection: 'notifications',
                  data: {
                    user: technologyUserId,
                    title: `C√≥ ƒë·ªÅ xu·∫•t ƒë·∫ßu t∆∞ m·ªõi cho c√¥ng ngh·ªá c·ªßa b·∫°n`,
                    message: `C√≥ m·ªôt ƒë·ªÅ xu·∫•t ƒë·∫ßu t∆∞ m·ªõi cho c√¥ng ngh·ªá "${technology.title}" t·ª´ ${proposeUserName}`,
                    type: 'technology',
                    action_url: `my-proposals`,
                    priority: 'normal',
                    is_read: false,
                  },
                })
              }
            }
          }

          // X·ª≠ l√Ω khi c·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh negotiating
          if (
            operation === 'update' &&
            doc.status === 'negotiating' &&
            previousDoc?.status !== 'negotiating'
          ) {
            // L·∫•y th√¥ng tin ng∆∞·ªùi ƒë·ªÅ xu·∫•t
            const proposeUserId = typeof doc.user === 'string' ? doc.user : doc.user?.id
            let proposeUserName = 'Ng∆∞·ªùi d√πng'

            if (proposeUserId) {
              try {
                const proposeUser = await req.payload.findByID({
                  collection: 'users',
                  id: proposeUserId,
                })
                proposeUserName = proposeUser?.full_name || proposeUser?.email || 'Ng∆∞·ªùi d√πng'
              } catch (error) {
                console.error('L·ªói khi l·∫•y th√¥ng tin user ƒë·ªÅ xu·∫•t:', error)
              }
            }

            // G·ª≠i th√¥ng b√°o cho ng∆∞·ªùi nh·∫≠n ƒë·ªÅ xu·∫•t (receiver)
            const receiverId = typeof doc.receiver === 'string' ? doc.receiver : doc.receiver?.id
            console.log('receiverId', receiverId)
            if (receiverId) {
              await req.payload.create({
                collection: 'notifications',
                data: {
                  user: receiverId,
                  title: `ƒê·ªÅ xu·∫•t ƒë·∫ßu t∆∞ ƒëang ƒë∆∞·ª£c th∆∞∆°ng l∆∞·ª£ng`,
                  message: `ƒê·ªÅ xu·∫•t ƒë·∫ßu t∆∞ cho c√¥ng ngh·ªá "${technology.title}" t·ª´ ${proposeUserName} ƒë√£ chuy·ªÉn sang tr·∫°ng th√°i th∆∞∆°ng l∆∞·ª£ng`,
                  type: 'technology',
                  action_url: `my-proposals`,
                  priority: 'high',
                  is_read: false,
                },
              })
            }

            // G·ª≠i th√¥ng b√°o cho ng∆∞·ªùi ƒë·ªÅ xu·∫•t (user)
            if (proposeUserId) {
              await req.payload.create({
                collection: 'notifications',
                data: {
                  user: proposeUserId,
                  title: `ƒê·ªÅ xu·∫•t c·ªßa b·∫°n ƒëang ƒë∆∞·ª£c th∆∞∆°ng l∆∞·ª£ng`,
                  message: `ƒê·ªÅ xu·∫•t ƒë·∫ßu t∆∞ c·ªßa b·∫°n cho c√¥ng ngh·ªá "${technology.title}" ƒë√£ chuy·ªÉn sang tr·∫°ng th√°i th∆∞∆°ng l∆∞·ª£ng`,
                  type: 'technology',
                  action_url: `my-proposals`,
                  priority: 'high',
                  is_read: false,
                },
              })
            }
          }
        } catch (error) {
          console.error('L·ªói khi x·ª≠ l√Ω notification cho technology propose:', error)
        }
      },
    ],
  },
  fields: [
    {
      name: 'technology',
      type: 'relationship',
      relationTo: 'technologies',
      required: true,
      label: 'C√¥ng ngh·ªá',
      admin: {
        description: 'C√¥ng ngh·ªá',
      },
    },
    {
      name: 'user',
      type: 'relationship',
      relationTo: 'users',
      required: true,
      label: 'Ng∆∞·ªùi ra ƒë·ªÅ xu·∫•t',
    },
    {
      name: 'receiver',
      type: 'relationship',
      relationTo: 'users',
      required: true,
      label: 'Ng∆∞·ªùi nh·∫≠n ƒë·ªÅ xu·∫•t',
    },
    {
      name: 'description',
      type: 'textarea',
      required: true,
      label: 'M√¥ t·∫£',
    },
    {
      name: 'budget',
      type: 'number',
      required: true,
      label: 'Ng√¢n s√°ch',
    },
    {
      name: 'document',
      type: 'upload',
      relationTo: 'media',
      label: 'T√†i li·ªáu b·ªï sung',
      admin: {
        description: 'T√†i li·ªáu',
      },
    },
    // th√™m tr·∫°ng th√°i ƒëang k√≠ h·ª£p ƒë·ªìng, ƒëang ho√†n thi·ªán h·ª£p ƒë·ªìng
    {
      name: 'status',
      type: 'select',
      required: true,
      label: 'Tr·∫°ng th√°i',
      options: [
        'pending',
        'negotiating',
        'contact_signing',
        'contract_signed',
        'completed',
        'cancelled',
      ],
      defaultValue: 'pending',
      admin: {
        description: 'Tr·∫°ng th√°i',
      },
    },
  ],
  timestamps: true,
}
