import { getPayload } from 'payload'

// Types v√† Interfaces
export interface NotificationData {
  user: string
  title: string
  message: string
  type: NotificationType
  action_url?: string
  priority?: NotificationPriority
  is_read?: boolean
  metadata?: Record<string, any>
}

export type NotificationType =
  | 'info'
  | 'success'
  | 'warning'
  | 'error'
  | 'auction'
  | 'transaction'
  | 'technology'
  | 'system'
  | 'propose'
  | 'contract'
  | 'negotiation'

export type NotificationPriority = 'low' | 'normal' | 'high' | 'urgent'

export interface NotificationResult {
  success: boolean
  notificationId?: string
  error?: string
}

export interface BatchNotificationResult {
  success: boolean
  created: number
  failed: number
  results: NotificationResult[]
  errors: string[]
}

// Context types cho c√°c tr∆∞·ªùng h·ª£p kh√°c nhau
export interface ProposeContext {
  proposeId: string
  proposeType: 'technology-propose' | 'project-propose' | 'propose'
  proposeOwnerId: string
  entityOwnerId?: string
  entityTitle?: string
  entityId?: string
  price?: number
  message?: string
}

export interface AuctionContext {
  auctionId: string
  auctionTitle: string
  bidderId: string
  bidAmount: number
  auctionOwnerId: string
  isWinningBid: boolean
}

export interface ContractContext {
  contractId: string
  userAId: string
  userBId: string
  contractTitle: string
  price: number
  status: string
}

export interface NegotiationContext {
  negotiationId: string
  offerId: string
  proposerId: string
  acceptorId: string
  price: number
  message?: string
  technologyId?: string
}

export interface RoomMessageContext {
  roomId: string
  messageId: string
  senderId: string
  message: string
  roomTitle?: string
}

/**
 * NotificationManager - Class ƒë·ªÉ x·ª≠ l√Ω t·∫•t c·∫£ c√°c tr∆∞·ªùng h·ª£p t·∫°o notification
 */
export class NotificationManager {
  private payload: any

  constructor() {
    // Kh√¥ng kh·ªüi t·∫°o payload trong constructor ƒë·ªÉ tr√°nh circular dependency
  }

  private async getPayload() {
    if (!this.payload) {
      // Import config dynamically ƒë·ªÉ tr√°nh circular dependency
      const config = await import('@payload-config')
      this.payload = await getPayload({ config: config.default })
    }
    return this.payload
  }

  /**
   * T·∫°o m·ªôt notification ƒë∆°n l·∫ª
   */
  async createNotification(data: NotificationData): Promise<NotificationResult> {
    try {
      console.log(`üìù Creating notification for user: ${data.user}`)

      const payloadInstance = await this.getPayload()
      const notification = await payloadInstance.create({
        collection: 'notifications',
        data: {
          user: data.user,
          title: data.title,
          message: data.message,
          type: data.type,
          action_url: data.action_url,
          priority: data.priority || 'normal',
          is_read: data.is_read || false,
        },
      })

      console.log(`‚úÖ Notification created successfully: ${notification.id}`)

      return {
        success: true,
        notificationId: notification.id,
      }
    } catch (error) {
      console.error(`‚ùå Failed to create notification:`, error)
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error',
      }
    }
  }

  /**
   * T·∫°o nhi·ªÅu notifications c√πng l√∫c
   */
  async createBatchNotifications(
    notifications: NotificationData[],
  ): Promise<BatchNotificationResult> {
    console.log(`üìù Creating ${notifications.length} notifications in batch`)

    const results: NotificationResult[] = []
    const errors: string[] = []
    let created = 0
    let failed = 0

    for (const notificationData of notifications) {
      const result = await this.createNotification(notificationData)
      results.push(result)

      if (result.success) {
        created++
      } else {
        failed++
        if (result.error) {
          errors.push(result.error)
        }
      }
    }

    console.log(`‚úÖ Batch notification completed: ${created} created, ${failed} failed`)

    return {
      success: failed === 0,
      created,
      failed,
      results,
      errors,
    }
  }

  /**
   * T·∫°o notification khi accept propose
   */
  async notifyAcceptPropose(context: ProposeContext): Promise<BatchNotificationResult> {
    console.log(`üéØ Creating notifications for accept propose: ${context.proposeId}`)

    const notifications: NotificationData[] = []

    // Notification cho ng∆∞·ªùi ƒë·ªÅ xu·∫•t
    notifications.push({
      user: context.proposeOwnerId,
      title: `ƒê·ªÅ xu·∫•t c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ch·∫•p nh·∫≠n`,
      message:
        context.message ||
        `ƒê·ªÅ xu·∫•t c·ªßa b·∫°n cho "${context.entityTitle || 'd·ª± √°n'}" ƒë√£ ƒë∆∞·ª£c ch·∫•p nh·∫≠n v√† s·∫µn s√†ng ƒë√†m ph√°n.`,
      type: 'success',
      action_url: context.entityId
        ? `technologies/${context.entityId}`
        : `technologies/negotiations/${context.proposeId}`,
      priority: 'high',
    })

    return await this.createBatchNotifications(notifications)
  }

  /**
   * T·∫°o notification khi c√≥ bid m·ªõi trong auction
   */
  async notifyAuctionBid(context: AuctionContext): Promise<BatchNotificationResult> {
    console.log(`üéØ Creating notifications for auction bid: ${context.auctionId}`)

    const notifications: NotificationData[] = []

    // Notification cho ch·ªß s·ªü h·ªØu auction
    notifications.push({
      user: context.auctionOwnerId,
      title: `C√≥ bid m·ªõi cho ƒë·∫•u gi√° "${context.auctionTitle}"`,
      message: `C√≥ bid m·ªõi v·ªõi gi√° ${context.bidAmount.toLocaleString()} VNƒê${context.isWinningBid ? ' (Bid cao nh·∫•t hi·ªán t·∫°i)' : ''}.`,
      type: 'auction',
      action_url: `auctions/${context.auctionId}`,
      priority: context.isWinningBid ? 'high' : 'normal',
    })

    // Notification cho bidder (n·∫øu l√† winning bid)
    if (context.isWinningBid) {
      notifications.push({
        user: context.bidderId,
        title: `Bid c·ªßa b·∫°n ƒëang d·∫´n ƒë·∫ßu`,
        message: `Bid c·ªßa b·∫°n v·ªõi gi√° ${context.bidAmount.toLocaleString()} VNƒê ƒëang d·∫´n ƒë·∫ßu trong ƒë·∫•u gi√° "${context.auctionTitle}".`,
        type: 'success',
        action_url: `auctions/${context.auctionId}`,
        priority: 'normal',
      })
    }

    return await this.createBatchNotifications(notifications)
  }

  /**
   * T·∫°o notification khi accept offer
   */
  async notifyAcceptOffer(context: NegotiationContext): Promise<BatchNotificationResult> {
    console.log(`üéØ Creating notifications for accept offer: ${context.offerId}`)

    const notifications: NotificationData[] = []

    // Notification cho ng∆∞·ªùi ƒë·ªÅ xu·∫•t offer
    notifications.push({
      user: context.proposerId,
      title: `Offer c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ch·∫•p nh·∫≠n`,
      message:
        context.message ||
        `Offer c·ªßa b·∫°n v·ªõi gi√° ${context.price.toLocaleString()} VNƒê ƒë√£ ƒë∆∞·ª£c ch·∫•p nh·∫≠n.`,
      type: 'success',
      action_url: context.technologyId
        ? `technologies/${context.technologyId}`
        : `negotiations/${context.negotiationId}`,
      priority: 'high',
    })

    // Notification cho ng∆∞·ªùi ch·∫•p nh·∫≠n offer
    notifications.push({
      user: context.acceptorId,
      title: `B·∫°n ƒë√£ ch·∫•p nh·∫≠n offer`,
      message:
        context.message || `B·∫°n ƒë√£ ch·∫•p nh·∫≠n offer v·ªõi gi√° ${context.price.toLocaleString()} VNƒê.`,
      type: 'info',
      action_url: context.technologyId
        ? `technologies/${context.technologyId}`
        : `negotiations/${context.negotiationId}`,
      priority: 'normal',
    })

    return await this.createBatchNotifications(notifications)
  }

  /**
   * T·∫°o notification khi c√≥ tin nh·∫Øn m·ªõi trong room chat
   */
  async notifyRoomMessage(context: RoomMessageContext): Promise<BatchNotificationResult> {
    console.log(`üéØ Creating notifications for room message: ${context.messageId}`)

    try {
      // L·∫•y danh s√°ch ng∆∞·ªùi d√πng trong ph√≤ng chat
      const payloadForRoom = await this.getPayload()
      const roomUsers = await payloadForRoom.find({
        collection: 'room-user',
        where: {
          room: {
            equals: context.roomId,
          },
        },
        depth: 2,
      })

      if (!roomUsers.docs || roomUsers.docs.length === 0) {
        console.log('No users found in room')
        return {
          success: true,
          created: 0,
          failed: 0,
          results: [],
          errors: [],
        }
      }

      // L·∫•y th√¥ng tin ng∆∞·ªùi g·ª≠i
      const payloadForSender = await this.getPayload()
      const sender = await payloadForSender.findByID({
        collection: 'users',
        id: context.senderId,
      })

      const senderName = sender?.full_name || sender?.email || 'Ng∆∞·ªùi d√πng'
      const messagePreview =
        context.message?.substring(0, 100) +
        (context.message && context.message.length > 100 ? '...' : '')

      const notifications: NotificationData[] = roomUsers.docs
        .filter((roomUser: any) => {
          const userId = typeof roomUser.user === 'string' ? roomUser.user : roomUser.user?.id
          return userId !== context.senderId
        })
        .map((roomUser: any) => {
          const userId = typeof roomUser.user === 'string' ? roomUser.user : roomUser.user?.id

          return {
            user: userId,
            title: `Tin nh·∫Øn m·ªõi t·ª´ ${senderName}`,
            message: `B·∫°n c√≥ tin nh·∫Øn m·ªõi: "${messagePreview}"`,
            type: 'info',
            action_url: `messages?room=${context.roomId}`,
            priority: 'normal',
          }
        })

      return await this.createBatchNotifications(notifications)
    } catch (error) {
      console.error('Error in notifyRoomMessage:', error)
      return {
        success: false,
        created: 0,
        failed: 1,
        results: [],
        errors: [error instanceof Error ? error.message : 'Unknown error'],
      }
    }
  }

  /**
   * T·∫°o notification khi contract ƒë∆∞·ª£c t·∫°o
   */
  async notifyContractCreated(context: ContractContext): Promise<BatchNotificationResult> {
    console.log(`üéØ Creating notifications for contract created: ${context.contractId}`)

    const notifications: NotificationData[] = []

    // Notification cho c·∫£ hai b√™n trong contract
    const contractMessage = `H·ª£p ƒë·ªìng "${context.contractTitle}" ƒë√£ ƒë∆∞·ª£c t·∫°o v·ªõi gi√° tr·ªã ${context.price.toLocaleString()} VNƒê.`

    notifications.push({
      user: context.userAId,
      title: `H·ª£p ƒë·ªìng m·ªõi ƒë√£ ƒë∆∞·ª£c t·∫°o`,
      message: contractMessage,
      type: 'contract',
      action_url: `contracts/${context.contractId}`,
      priority: 'high',
    })

    notifications.push({
      user: context.userBId,
      title: `H·ª£p ƒë·ªìng m·ªõi ƒë√£ ƒë∆∞·ª£c t·∫°o`,
      message: contractMessage,
      type: 'contract',
      action_url: `contracts/${context.contractId}`,
      priority: 'high',
    })

    return await this.createBatchNotifications(notifications)
  }

  /**
   * T·∫°o notification khi contract status thay ƒë·ªïi
   */
  async notifyContractStatusChange(
    context: ContractContext,
    oldStatus: string,
    newStatus: string,
  ): Promise<BatchNotificationResult> {
    console.log(`üéØ Creating notifications for contract status change: ${context.contractId}`)

    const notifications: NotificationData[] = []

    const statusMessages: Record<string, string> = {
      in_progress: 'H·ª£p ƒë·ªìng ƒëang ƒë∆∞·ª£c th·ª±c hi·ªán',
      completed: 'H·ª£p ƒë·ªìng ƒë√£ ho√†n th√†nh',
      cancelled: 'H·ª£p ƒë·ªìng ƒë√£ b·ªã h·ªßy',
      disputed: 'H·ª£p ƒë·ªìng c√≥ tranh ch·∫•p',
    }

    const message = `H·ª£p ƒë·ªìng "${context.contractTitle}" ƒë√£ chuy·ªÉn t·ª´ "${oldStatus}" sang "${newStatus}". ${statusMessages[newStatus] || ''}`

    notifications.push({
      user: context.userAId,
      title: `Tr·∫°ng th√°i h·ª£p ƒë·ªìng ƒë√£ thay ƒë·ªïi`,
      message,
      type: 'contract',
      action_url: `contracts/${context.contractId}`,
      priority: 'normal',
    })

    notifications.push({
      user: context.userBId,
      title: `Tr·∫°ng th√°i h·ª£p ƒë·ªìng ƒë√£ thay ƒë·ªïi`,
      message,
      type: 'contract',
      action_url: `contracts/${context.contractId}`,
      priority: 'normal',
    })

    return await this.createBatchNotifications(notifications)
  }

  /**
   * T·∫°o notification t√πy ch·ªânh v·ªõi template
   */
  async notifyCustom(
    userIds: string[],
    template: {
      title: string
      message: string
      type: NotificationType
      action_url?: string
      priority?: NotificationPriority
    },
  ): Promise<BatchNotificationResult> {
    console.log(`üéØ Creating custom notifications for ${userIds.length} users`)

    const notifications: NotificationData[] = userIds.map((userId) => ({
      user: userId,
      title: template.title,
      message: template.message,
      type: template.type,
      action_url: template.action_url,
      priority: template.priority || 'normal',
    }))

    return await this.createBatchNotifications(notifications)
  }

  /**
   * L·∫•y th√¥ng tin user ƒë·ªÉ t·∫°o notification context
   */
  async getUserInfo(userId: string): Promise<{ id: string; name: string; email: string } | null> {
    try {
      const payloadInstance = await this.getPayload()
      const user = await payloadInstance.findByID({
        collection: 'users',
        id: userId,
      })

      return {
        id: user.id,
        name: user.full_name || user.email,
        email: user.email,
      }
    } catch (error) {
      console.error(`Error getting user info for ${userId}:`, error)
      return null
    }
  }

  /**
   * L·∫•y th√¥ng tin entity (technology/project/demand) ƒë·ªÉ t·∫°o notification context
   */
  async getEntityInfo(
    collection: string,
    entityId: string,
  ): Promise<{ id: string; title: string; ownerId?: string } | null> {
    try {
      const payloadInstance = await this.getPayload()
      const entity = await payloadInstance.findByID({
        collection,
        id: entityId,
        depth: 1,
      })

      return {
        id: entity.id,
        title: entity.title || entity.name || 'N/A',
        ownerId: entity.submitter || entity.user || entity.owner,
      }
    } catch (error) {
      console.error(`Error getting entity info for ${collection}/${entityId}:`, error)
      return null
    }
  }
}

// Export singleton instance
export const notificationManager = new NotificationManager()
